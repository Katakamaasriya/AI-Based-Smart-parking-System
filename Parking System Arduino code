#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>

LiquidCrystal_I2C lcd(0x27, 16, 2);  // 16x2 LCD
Servo myservo;

#define ir_enter 2
#define ir_back 4
#define ir_car1 5
#define ir_car2 6
#define ir_car3 7
#define ir_car4 8
#define ir_car5 9
#define ir_car6 10
#define ir_car7 11
#define ir_car8 12

int slots[8] = {0, 0, 0, 0, 0, 0, 0, 0};  // States of each slot (0: Empty, 1: Full)
int slot = 8;  // Initial number of available slots is 8

void setup() {
Serial.begin(9600);

// Set IR sensor pins
pinMode(ir_car1, INPUT);
pinMode(ir_car2, INPUT);
pinMode(ir_car3, INPUT);
pinMode(ir_car4, INPUT);
pinMode(ir_car5, INPUT);
pinMode(ir_car6, INPUT);
pinMode(ir_car7, INPUT);
pinMode(ir_car8, INPUT);
pinMode(ir_enter, INPUT);
pinMode(ir_back, INPUT);

myservo.attach(3);
myservo.write(0); // Initial position (Closed)

lcd.init();
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print(" Hi Welcome To ");
lcd.setCursor(0, 1);
lcd.print(" Vignanamela ");
delay(5000);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Smart CarParking");
lcd.setCursor(0, 1);
lcd.print("   System    ");
delay(5000);
lcd.clear();
}

void loop() {
Read_Sensor();

// Show available slot count
lcd.setCursor(0, 0);
lcd.print("Available: ");
lcd.print(slot);

// Display the status for slots 1-4 in the first row
lcd.setCursor(0, 1);
for (int i = 0; i < 4; i++) {
lcd.print(i + 1);  // Print slot number
lcd.print(":");
if (slots[i] == 1) {
lcd.print("F ");  // Full
} else {
lcd.print("E ");  // Empty
}
}

delay(1000);  // Refresh the display every second

// Update the second row with slots 5-8
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Available: ");
lcd.print(slot);

lcd.setCursor(0, 1);
for (int i = 4; i < 8; i++) {
lcd.print(i + 1);  // Print slot number
lcd.print(":");
if (slots[i] == 1) {
lcd.print("F ");  // Full
} else {
lcd.print("E ");  // Empty
}
}

delay(1000);  // Refresh the display every second

// Handle Entry
if (digitalRead(ir_enter) == LOW) {  // Vehicle detected at entry
Open_Gate();
delay(2000);  // Keep gate open for 2 seconds (vehicle enters)
Close_Gate();
Update_Slots(true);  // Vehicle entered, decrease available slots
}

// Handle Exit
if (digitalRead(ir_back) == LOW) {  // Vehicle detected at exit
Open_Gate();
delay(2000);  // Keep gate open for 2 seconds (vehicle exits)
Close_Gate();
Update_Slots(false);  // Vehicle exited, increase available slots
}
}

void Open_Gate() {
myservo.write(90);  // Open gate (servo goes to 0 degrees)
delay(500);        // Wait for servo to fully open
}

void Close_Gate() {
myservo.write(0);  // Close gate (servo goes to 90 degrees)
delay(500);         // Wait for servo to fully close
}

void Read_Sensor() {
// Reset slots state
for (int i = 0; i < 8; i++) {
slots[i] = 0;
}

// Update slots state based on sensor input
if (digitalRead(ir_car1) == LOW) { slots[0] = 1; }
if (digitalRead(ir_car2) == LOW) { slots[1] = 1; }
if (digitalRead(ir_car3) == LOW) { slots[2] = 1; }
if (digitalRead(ir_car4) == LOW) { slots[3] = 1; }
if (digitalRead(ir_car5) == LOW) { slots[4] = 1; }
if (digitalRead(ir_car6) == LOW) { slots[5] = 1; }
if (digitalRead(ir_car7) == LOW) { slots[6] = 1; }
if (digitalRead(ir_car8) == LOW) { slots[7] = 1; }
}

void Update_Slots(bool vehicleEntered) {
int total = 0;

// Update the slots array
for (int i = 0; i < 8; i++) {
total += slots[i];
}

// Adjust the available slots based on whether the vehicle entered or exited
if (vehicleEntered) {
slot = 8 - total;  // Decrease available slots
} else {
slot = 8 - total;  // Increase available slots
}
}
