#include <Servo.h>
#include <Wire.h>
#include <LiquidCrystal_I2C.h>
LiquidCrystal_I2C lcd(0x27, 16, 2); 
Servo myservo;
#define ir_enter 2
#define ir_back 4
#define ir_car1 5
#define ir_car2 6
#define ir_car3 7
#define ir_car4 8
#define ir_car5 9
#define ir_car6 10
#define ir_car7 11
#define ir_car8 12
int slots[8] = {0, 0, 0, 0, 0, 0, 0, 0}; 
int slot = 8; 
void setup() {
Serial.begin(9600);
pinMode(ir_car1, INPUT);
pinMode(ir_car2, INPUT);
pinMode(ir_car3, INPUT);
pinMode(ir_car4, INPUT);
pinMode(ir_car5, INPUT);
pinMode(ir_car6, INPUT);
pinMode(ir_car7, INPUT);
pinMode(ir_car8, INPUT);
pinMode(ir_enter, INPUT);
pinMode(ir_back, INPUT);
myservo.attach(3);
myservo.write(0);
lcd.init();
lcd.backlight();
lcd.setCursor(0, 0);
lcd.print(" Hi Welcome To ");
lcd.setCursor(0, 1);
lcd.print(" Vignanamela ");
delay(5000);
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Smart CarParking");
lcd.setCursor(0, 1);
lcd.print("   System    ");
delay(5000);
lcd.clear();
}
void loop() {
Read_Sensor();
lcd.setCursor(0, 0);
lcd.print("Available: ");
lcd.print(slot);
lcd.setCursor(0, 1);
for (int i = 0; i < 4; i++) {
lcd.print(i + 1);  
lcd.print(":");
if (slots[i] == 1) {
lcd.print("F ");  
} else {
lcd.print("E "); 
}
}
delay(1000); 
lcd.clear();
lcd.setCursor(0, 0);
lcd.print("Available: ");
lcd.print(slot);
lcd.setCursor(0, 1);
for (int i = 4; i < 8; i++) {
lcd.print(i + 1); 
lcd.print(":");
if (slots[i] == 1) {
lcd.print("F "); 
} else {
lcd.print("E "); 
}
}
delay(1000); 
if (digitalRead(ir_enter) == LOW) {
Open_Gate();
delay(2000); 
Close_Gate();
Update_Slots(true);  
}
if (digitalRead(ir_back) == LOW) {  
Open_Gate();
delay(2000);  
Close_Gate();
Update_Slots(false);  
}
}
void Open_Gate() {
myservo.write(90);  
delay(500);        
}
void Close_Gate() {
myservo.write(0);  
delay(500);         
}
void Read_Sensor() {
for (int i = 0; i < 8; i++) {
slots[i] = 0;
}
if (digitalRead(ir_car1) == LOW) { slots[0] = 1; }
if (digitalRead(ir_car2) == LOW) { slots[1] = 1; }
if (digitalRead(ir_car3) == LOW) { slots[2] = 1; }
if (digitalRead(ir_car4) == LOW) { slots[3] = 1; }
if (digitalRead(ir_car5) == LOW) { slots[4] = 1; }
if (digitalRead(ir_car6) == LOW) { slots[5] = 1; }
if (digitalRead(ir_car7) == LOW) { slots[6] = 1; }
if (digitalRead(ir_car8) == LOW) { slots[7] = 1; }
}
void Update_Slots(bool vehicleEntered) {
int total = 0;
for (int i = 0; i < 8; i++) {
total += slots[i];
}
if (vehicleEntered) {
slot = 8 - total;  
} else {
slot = 8 - total;  // Increase available slots
}
}
